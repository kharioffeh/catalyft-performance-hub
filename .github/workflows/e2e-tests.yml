name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

jobs:
  # iOS Testing on macOS runners
  e2e-ios:
    runs-on: macos-13
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Install dependencies
        working-directory: mobile
        run: npm install --legacy-peer-deps

      - name: Validate E2E setup
        working-directory: mobile
        run: npm run detox:validate

      - name: Setup iOS Simulator
        run: |
          # Install applesimutils (required by Detox)
          brew tap wix/brew
          brew install applesimutils
          
          # Verify applesimutils installation
          applesimutils --version
          
          # List available simulators
          xcrun simctl list devices available
          
          # Try to boot iPhone 15 first, then iPhone 14 as fallback
          xcrun simctl boot "iPhone 15" || xcrun simctl boot "iPhone 14" || echo "Simulator boot failed, continuing anyway"
          
          # Wait for simulator to be ready
          sleep 10

      - name: Install Expo development build tools
        working-directory: mobile
        run: |
          # Install required expo packages for native builds using legacy peer deps
          npm install expo-dev-client @expo/metro-config --legacy-peer-deps
        env:
          NPM_CONFIG_LEGACY_PEER_DEPS: true

      - name: Pre-build for iOS (generate native code)
        working-directory: mobile
        run: |
          # Clean any existing iOS directory and generate native iOS project
          rm -rf ios
          npx expo prebuild --platform ios
        env:
          EXPO_NO_TELEMETRY: 1
          NPM_CONFIG_LEGACY_PEER_DEPS: true

      - name: Build iOS app for testing
        working-directory: mobile
        run: |
          # Build using xcodebuild instead of expo run:ios
          cd ios
          # Find the actual workspace and scheme names
          WORKSPACE_NAME=$(find . -name "*.xcworkspace" | head -1 | sed 's|./||')
          SCHEME_NAME=$(xcodebuild -workspace "$WORKSPACE_NAME" -list | grep -A 100 "Schemes:" | grep -v "Schemes:" | head -1 | xargs)
          echo "Building workspace: $WORKSPACE_NAME with scheme: $SCHEME_NAME"
          xcodebuild -workspace "$WORKSPACE_NAME" -scheme "$SCHEME_NAME" -configuration Debug -sdk iphonesimulator -derivedDataPath build
        env:
          EXPO_NO_METRO: 1

      - name: Run iOS E2E tests
        working-directory: mobile
        run: |
          # Verify the iOS app was built successfully
          echo "Checking for iOS app binary..."
          find ios/build -name "*.app" -type d | head -5
          
          # List available iOS simulators
          echo "Available iOS simulators:"
          xcrun simctl list devices available | head -10
          
          # Run the tests with detailed logging
          echo "Starting iOS E2E tests..."
          npm run detox:test:ios 2>&1 | tee ios-test-output.log || {
            echo "=== iOS Test Failed - Showing output ==="
            cat ios-test-output.log
            echo "=== End of iOS Test Output ==="
            
            echo "=== Checking for Jest/Detox logs ==="
            find . -name "*.log" -type f -exec echo "=== {} ===" \; -exec cat {} \; 2>/dev/null || true
            
            echo "=== Simulator logs ==="
            xcrun simctl list devices | grep "Booted" || echo "No booted simulators found"
            
            exit 1
          }
        env:
          DETOX_LOGLEVEL: trace
          DEBUG: "*"

      - name: Upload iOS test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-e2e-artifacts
          path: |
            mobile/artifacts/
            mobile/e2e/screenshots/
          retention-days: 7

  # Android Testing on Ubuntu runners
  e2e-android:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK packages
        run: |
          # Accept licenses first
          yes | sdkmanager --licenses || true
          
          # Install basic tools
          echo "Installing basic Android tools..."
          sdkmanager "platform-tools" "emulator"
          
          # Install system images with better fallback logic
          echo "Installing Android system images..."
          if sdkmanager "system-images;android-33;google_apis;x86_64"; then
            echo "✅ Android 33 system image installed"
            ANDROID_API=33
          elif sdkmanager "system-images;android-34;google_apis;x86_64"; then
            echo "✅ Android 34 system image installed (fallback)"
            ANDROID_API=34
          elif sdkmanager "system-images;android-32;google_apis;x86_64"; then
            echo "✅ Android 32 system image installed (fallback)"
            ANDROID_API=32
          else
            echo "❌ Failed to install any Android system image"
            exit 1
          fi
          
          # Install corresponding platform and build tools
          echo "Installing platform and build tools for API $ANDROID_API..."
          sdkmanager "platforms;android-$ANDROID_API"
          sdkmanager "build-tools;${ANDROID_API}.0.0" || sdkmanager "build-tools;34.0.0"
          
          # Verify installations
          echo "Installed packages:"
          sdkmanager --list_installed | head -20

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Install dependencies
        working-directory: mobile
        run: npm install --legacy-peer-deps

      - name: Validate E2E setup
        working-directory: mobile
        run: npm run detox:validate

      - name: Enable KVM and install emulator dependencies
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
          # Install missing libraries for Android emulator
          sudo apt-get update
          sudo apt-get install -y libpulse0 libnss3 libnspr4 libxss1 libasound2t64

      - name: Setup Android Emulator
        run: |
          # Set environment variables for Android AVD
          export ANDROID_AVD_HOME=$HOME/.android/avd
          export ANDROID_SDK_HOME=$HOME
          
          # Ensure Android SDK tools are in PATH
          export PATH="$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH"
          
          # Create .android directory structure
          mkdir -p $HOME/.android/avd
          
          # Detect available system image
          echo "Detecting available system images..."
          if sdkmanager --list_installed | grep -q "system-images;android-33;google_apis;x86_64"; then
            SYSTEM_IMAGE="system-images;android-33;google_apis;x86_64"
            API_LEVEL=33
          elif sdkmanager --list_installed | grep -q "system-images;android-34;google_apis;x86_64"; then
            SYSTEM_IMAGE="system-images;android-34;google_apis;x86_64"
            API_LEVEL=34
          elif sdkmanager --list_installed | grep -q "system-images;android-32;google_apis;x86_64"; then
            SYSTEM_IMAGE="system-images;android-32;google_apis;x86_64"
            API_LEVEL=32
          else
            echo "❌ No suitable system image found"
            exit 1
          fi
          
          echo "Using system image: $SYSTEM_IMAGE (API $API_LEVEL)"
          
          # Create AVD
          echo "Creating AVD..."
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
            -n test_emulator \
            -k "$SYSTEM_IMAGE" \
            --force \
            --device "pixel_6"
          
          # List created AVDs
          echo "Created AVDs:"
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd
          
          # Check if emulator binary exists
          echo "Checking emulator binary:"
          ls -la $ANDROID_HOME/emulator/emulator
          
          # Start emulator with verbose logging
          echo "Starting Android emulator..."
          $ANDROID_HOME/emulator/emulator \
            -avd test_emulator \
            -no-audio \
            -no-window \
            -gpu swiftshader_indirect \
            -no-snapshot \
            -wipe-data \
            -memory 2048 \
            -verbose \
            > emulator.log 2>&1 &
          
          EMULATOR_PID=$!
          echo "Emulator started with PID: $EMULATOR_PID"
          
          # Wait for emulator device to appear
          echo "Waiting for emulator device..."
          for i in {1..60}; do
            if adb devices | grep -q "emulator"; then
              echo "Emulator device detected!"
              break
            fi
            echo "Attempt $i/60: Waiting for emulator..."
            sleep 3
          done
          
          # Check if device was detected
          adb devices
          
          # If no device, show emulator log
          if ! adb devices | grep -q "emulator"; then
            echo "=== EMULATOR LOG ==="
            cat emulator.log
            echo "=== END EMULATOR LOG ==="
            exit 1
          fi
          
          echo "Android emulator setup complete!"

      - name: Install Expo development build tools
        working-directory: mobile
        run: |
          # Install required expo packages for native builds using legacy peer deps
          npm install expo-dev-client @expo/metro-config --legacy-peer-deps
        env:
          NPM_CONFIG_LEGACY_PEER_DEPS: true

      - name: Pre-build for Android (generate native code)
        working-directory: mobile
        run: |
          # Clean any existing Android directory and generate native Android project
          rm -rf android
          npx expo prebuild --platform android
          
          # Create gradle.properties to handle duplicate META-INF files
          echo "Adding packaging options via gradle.properties..."
          cat >> android/gradle.properties << 'EOF'

# Handle duplicate META-INF files during Android build
android.packagingOptions.pickFirsts=**/libc++_shared.so,**/libjsc.so,**/libflipper.so,META-INF/LICENSE.md,META-INF/LICENSE-notice.md,META-INF/NOTICE.md
android.packagingOptions.excludes=META-INF/DEPENDENCIES,META-INF/DEPENDENCIES.txt,META-INF/LICENSE.txt,META-INF/NOTICE.txt
EOF
        env:
          EXPO_NO_TELEMETRY: 1
          NPM_CONFIG_LEGACY_PEER_DEPS: true

      - name: Build Android app for testing
        working-directory: mobile
        run: |
          # Build using gradlew instead of expo run:android
          cd android
          chmod +x gradlew
          
          # Build the main app APK
          echo "Building main Android APK..."
          ./gradlew assembleDebug --stacktrace --no-daemon
          
          # Show available APKs
          echo "Available APK files:"
          find . -name "*.apk" -type f
          
          echo "✅ Main APK built successfully"
        env:
          EXPO_NO_METRO: 1

      - name: Run Android E2E tests
        working-directory: mobile
        run: |
          # Verify the Android app was built successfully
          echo "Checking for Android APK..."
          find android -name "*.apk" -type f | head -5
          
          # Check emulator status
          echo "Emulator status:"
          adb devices
          
          # Show emulator log if there are issues
          echo "Recent emulator log:"
          tail -50 emulator.log || echo "No emulator log found"
          
          # Run the tests with retries and better error handling
          echo "Starting Android E2E tests..."
          npm run detox:test:android || {
            echo "First test run failed, checking logs and retrying..."
            find . -name "*.log" -type f -exec echo "=== {} ===" \; -exec cat {} \; || true
            npm run detox:test:android
          }
        env:
          DETOX_LOGLEVEL: info

      - name: Upload Android test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: android-e2e-artifacts
          path: |
            mobile/artifacts/
            mobile/e2e/screenshots/
          retention-days: 7

  # Test Results Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [e2e-ios, e2e-android]
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "## E2E Test Results 🧪" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.e2e-ios.result }}" == "success" ]; then
            echo "✅ **iOS Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **iOS Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.e2e-android.result }}" == "success" ]; then
            echo "✅ **Android Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Android Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed results in the job logs above." >> $GITHUB_STEP_SUMMARY