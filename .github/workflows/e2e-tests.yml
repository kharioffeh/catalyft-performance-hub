name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # iOS Testing on macOS runners
  e2e-ios:
    runs-on: macos-13
    timeout-minutes: 90
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            mobile/ios/Pods
            ~/.cocoapods
          key: pods-${{ runner.os }}-${{ hashFiles('mobile/ios/Podfile.lock') }}
          restore-keys: pods-${{ runner.os }}-

      - name: Cache Xcode DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: dd-${{ runner.os }}-${{ hashFiles('mobile/ios/Podfile.lock') }}
          restore-keys: dd-${{ runner.os }}-

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Install dependencies
        working-directory: mobile
        run: npm install --legacy-peer-deps

      - name: Validate E2E setup
        working-directory: mobile
        run: npm run detox:validate

      - name: Setup iOS Simulator
        run: |
          # Install applesimutils (required by Detox)
          brew tap wix/brew
          brew install applesimutils
          
          # Verify applesimutils installation
          applesimutils --version
          
          # List available simulators
          xcrun simctl list devices available
          
          # Try to boot iPhone 15 first, then iPhone 14 as fallback
          xcrun simctl boot "iPhone 15" || xcrun simctl boot "iPhone 14" || echo "Simulator boot failed, continuing anyway"
          
          # Wait for simulator to be ready
          sleep 10

      - name: Install Expo development build tools
        working-directory: mobile
        run: |
          # Install required expo packages for native builds using legacy peer deps
          npm install expo-dev-client @expo/metro-config --legacy-peer-deps
        env:
          NPM_CONFIG_LEGACY_PEER_DEPS: true

      - name: Build iOS with CocoaPods and Xcode
        working-directory: mobile
        run: |
          CI=1 npx expo prebuild --platform ios --clean
          cd ios && npx pod-install
          WORKSPACE=$(ls -1 *.xcworkspace | head -1)
          SCHEME=$(xcodebuild -list -json -workspace "$WORKSPACE" | /usr/bin/python3 -c 'import sys,json; print(json.load(sys.stdin)["workspace"]["schemes"][0])')
          xcodebuild -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration Debug -sdk iphonesimulator -derivedDataPath build CODE_SIGNING_ALLOWED=NO
        env:
          CI: true
          EXPO_NO_TELEMETRY: 1

      - name: Verify the iOS app was built successfully
        working-directory: mobile
        run: |
          echo "Checking for iOS app binary..."
          FOUND_APP=$(ls -1 ios/build/Build/Products/Debug-iphonesimulator/*.app 2>/dev/null | head -1 || true)
          if [ -z "$FOUND_APP" ]; then
            echo "❌ No .app found under ios/build/Build/Products/Debug-iphonesimulator/"
            echo "Available products:"
            find ios/build/Build/Products -maxdepth 3 -type f -name "*.app" -print || true
            exit 1
          fi
          echo "✅ Found app: $FOUND_APP"
          echo "IOS_APP_PATH=$FOUND_APP" >> "$GITHUB_ENV"
          echo "Available iOS simulators:"
          xcrun simctl list devices available | head -10

      - name: Prepare artifact folders (ios)
        working-directory: mobile
        run: mkdir -p artifacts e2e/screenshots

      - name: Start Metro (background)
        working-directory: mobile
        run: |
          nohup npx expo start --dev-client --port 8081 --non-interactive >/tmp/metro.log 2>&1 &
          echo $! > /tmp/metro.pid
          sleep 12
      
      - name: Run iOS smoke test
        working-directory: mobile
        run: |
          npx detox test \
            --configuration ios.sim.debug \
            --artifacts-location artifacts \
            --record-logs none \
            --take-screenshots failing \
            --record-videos none \
            e2e/smoke.e2e.ts
        env:
          DETOX_LOGLEVEL: info
      
      - name: Run iOS E2E tests
        working-directory: mobile
        run: |
          # Run the full test suite with detailed logging
          echo "Starting full iOS E2E test suite..."
          npm run detox:test:ios 2>&1 | tee ios-test-output.log || {
            echo "=== iOS Test Failed - Showing output ==="
            cat ios-test-output.log
            echo "=== End of iOS Test Output ==="
            
            echo "=== Checking for Jest/Detox logs ==="
            find . -name "*.log" -type f -exec echo "=== {} ===" \; -exec cat {} \; 2>/dev/null || true
            
            echo "=== Simulator logs ==="
            xcrun simctl list devices | grep "Booted" || echo "No booted simulators found"
            
            exit 1
          }
        env:
          DETOX_LOGLEVEL: trace
          DEBUG: "*"

      - name: Stop Metro
        if: always()
        run: |
          if [ -f /tmp/metro.pid ]; then kill -9 "$(cat /tmp/metro.pid)" || true; fi
          tail -n 200 /tmp/metro.log || true
          
      - name: Capture iOS simulator logs
        if: failure()
        working-directory: mobile
        run: |
          xcrun simctl list devices | tee ios-simulators.txt
          xcrun simctl spawn booted log show --style syslog --last 20m > ios-simulator.log || true

      - name: Upload iOS test artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ios-e2e-artifacts
          path: |
            mobile/ios-test-output.log
            mobile/artifacts/**
            mobile/e2e/screenshots/**
            mobile/ios/build/Build/Products/Debug-iphonesimulator/**/*.app
          if-no-files-found: warn
          retention-days: 7



  # Android Testing on Ubuntu runners
  e2e-android:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK packages
        run: |
          # Accept licenses first
          yes | sdkmanager --licenses || true
          
          # Install basic tools
          echo "Installing basic Android tools..."
          sdkmanager "platform-tools" "emulator" || true
          
          # Install system images with better fallback logic
          echo "Installing Android system images..."
          ANDROID_API=33
          if sdkmanager "system-images;android-33;google_apis;x86_64"; then
            echo "✅ Android 33 system image installed"
          elif sdkmanager "system-images;android-34;google_apis;x86_64"; then
            echo "✅ Android 34 system image installed (fallback)"
            ANDROID_API=34
          elif sdkmanager "system-images;android-32;google_apis;x86_64"; then
            echo "✅ Android 32 system image installed (fallback)"  
            ANDROID_API=32
          elif sdkmanager "system-images;android-30;google_apis;x86_64"; then
            echo "✅ Android 30 system image installed (fallback)"
            ANDROID_API=30
          else
            echo "❌ Failed to install any Android system image"
            exit 1
          fi
          
          # Store API level for later steps
          echo "ANDROID_API=$ANDROID_API" >> $GITHUB_ENV
          
          # Install corresponding platform and build tools
          echo "Installing platform and build tools for API $ANDROID_API..."
          sdkmanager "platforms;android-$ANDROID_API" || true
          sdkmanager "build-tools;34.0.0" || sdkmanager "build-tools;33.0.1" || true
          
          # Verify installations
          echo "Installed packages:"
          sdkmanager --list_installed | head -20

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Install dependencies
        working-directory: mobile
        run: npm install --legacy-peer-deps

      - name: Validate E2E setup
        working-directory: mobile
        run: npm run detox:validate

      - name: Enable KVM and install emulator dependencies
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
          # Install missing libraries for Android emulator
          sudo apt-get update
          sudo apt-get install -y libpulse0 libnss3 libnspr4 libxss1 libasound2t64

      - name: Install Android NDK 27.1.12297006
        shell: bash
        run: |
          set -euo pipefail
          echo "y" | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --install "ndk;27.1.12297006"
          echo "ANDROID_NDK_HOME=${ANDROID_SDK_ROOT}/ndk/27.1.12297006" >> "$GITHUB_ENV"

      - name: Create Android emulator
        run: |
          echo "Creating Android Virtual Device..."
          
          # Create AVD directory and set environment variables
          mkdir -p $HOME/.android/avd
          export ANDROID_AVD_HOME=$HOME/.android/avd
          export ANDROID_SDK_HOME=$HOME/.android
          
          # Delete existing AVD if it exists
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager delete avd -n test_emulator || true
          
          # Create new AVD using the API level from previous step (stored in ANDROID_API env var)
          echo "Creating AVD with Android API $ANDROID_API..."
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
            -n test_emulator \
            -k "system-images;android-$ANDROID_API;google_apis;x86_64" \
            -c 1024M \
            --force
          
          # Verify AVD was created
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd
          
          # Configure AVD for faster startup and better compatibility
          AVD_CONFIG="$HOME/.android/avd/test_emulator.avd/config.ini"
          if [ -f "$AVD_CONFIG" ]; then
            echo "Optimizing AVD configuration..."
            echo "hw.gpu.enabled=yes" >> "$AVD_CONFIG"
            echo "hw.gpu.mode=swiftshader_indirect" >> "$AVD_CONFIG"
            echo "hw.ramSize=3072" >> "$AVD_CONFIG"
            echo "disk.dataPartition.size=3072M" >> "$AVD_CONFIG"
            echo "hw.accelerometer=no" >> "$AVD_CONFIG"
            echo "hw.audioInput=no" >> "$AVD_CONFIG"
            echo "hw.audioOutput=no" >> "$AVD_CONFIG"
            echo "hw.camera.back=none" >> "$AVD_CONFIG"
            echo "hw.camera.front=none" >> "$AVD_CONFIG"
            echo "hw.gps=no" >> "$AVD_CONFIG"
            echo "hw.sensors.orientation=no" >> "$AVD_CONFIG"
            echo "hw.sensors.proximity=no" >> "$AVD_CONFIG"
          fi
          
          echo "✅ Android emulator setup complete!"

      - name: Start Android emulator
        run: |
          echo "Starting Android emulator..."
          
          # Start emulator in background with optimized settings for CI
          nohup $ANDROID_HOME/emulator/emulator \
            -avd test_emulator \
            -no-audio \
            -no-window \
            -gpu swiftshader_indirect \
            -no-snapshot \
            -wipe-data \
            -memory 3072 \
            -partition-size 3072 \
            -no-boot-anim \
            -netdelay none \
            -netspeed full \
            -qemu -m 3072 > emulator.log 2>&1 &
          
          # Wait for emulator to be ready with enhanced checking
          echo "Waiting for emulator device..."
          $ANDROID_HOME/platform-tools/adb wait-for-device
          
          # Wait for boot completion with timeout
          echo "Waiting for emulator boot completion..."
          timeout 300 bash -c '
            while true; do
              boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d "\r")
              if [ "$boot_completed" = "1" ]; then
                echo "✅ Emulator fully booted!"
                break
              fi
              echo "Still booting..."
              sleep 5
            done
          ' || {
            echo "❌ Emulator boot timeout"
            echo "=== EMULATOR LOG ==="
            tail -100 emulator.log || true
            echo "=== END EMULATOR LOG ==="
            exit 1
          }
          
          # Verify device is ready
          echo "Current ADB devices:"
          adb devices
          
          # Disable animations for faster testing
          adb shell settings put global window_animation_scale 0.0 || true
          adb shell settings put global transition_animation_scale 0.0 || true
          adb shell settings put global animator_duration_scale 0.0 || true
          
          echo "✅ Android emulator ready for testing!"

      - name: Install Expo development build tools
        working-directory: mobile
        run: |
          # Install required expo packages for native builds using legacy peer deps
          npm install expo-dev-client @expo/metro-config --legacy-peer-deps
        env:
          NPM_CONFIG_LEGACY_PEER_DEPS: true

      - name: Build Android (app only) with packaging fix
        working-directory: mobile
        run: |
          rm -rf android
          CI=1 npx expo prebuild --platform android --clean
          cat >> android/build.gradle <<'EOF'
/* ---- CI: Packaging fix for Detox androidTest ---- */
subprojects {
  afterEvaluate { project ->
    if (project.plugins.hasPlugin('com.android.application') || project.plugins.hasPlugin('com.android.library')) {
      def ext = project.extensions.findByName('android')
      if (ext != null) {
        ext.packaging { resources { excludes += [
          'META-INF/LICENSE','META-INF/LICENSE.md','META-INF/LICENSE.txt',
          'META-INF/NOTICE','META-INF/NOTICE.md','META-INF/NOTICE.txt',
          'META-INF/DEPENDENCIES','META-INF/AL2.0','META-INF/LGPL2.1'
        ]}}
        ext.testOptions { packaging { resources { excludes += [
          'META-INF/LICENSE','META-INF/LICENSE.md','META-INF/LICENSE.txt',
          'META-INF/NOTICE','META-INF/NOTICE.md','META-INF/NOTICE.txt',
          'META-INF/DEPENDENCIES','META-INF/AL2.0','META-INF/LGPL2.1'
        ]}}}
      }
    }
  }
}
/* ---- end fix ---- */
EOF
          cd android
          chmod +x gradlew
          ./gradlew --no-daemon :app:assembleDebug :app:assembleAndroidTest -x lint --info
        env:
          EXPO_NO_TELEMETRY: 1

      - name: Verify Android APKs were built successfully
        working-directory: mobile
        shell: bash
        run: |
          set -euo pipefail

          echo "Checking for main debug APK…"
          MAIN_APK="android/app/build/outputs/apk/debug/app-debug.apk"
          if [ ! -f "$MAIN_APK" ]; then
            echo "Missing $MAIN_APK"
            echo "Available files under outputs/apk/debug:"
            find android/app/build/outputs/apk/debug -maxdepth 1 -type f -print || true
            exit 1
          fi
          echo "Found: $MAIN_APK"

          # Required because Detox config sets testBinaryPath
          TEST_APK="android/app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
          if [ ! -f "$TEST_APK" ]; then
            echo "Missing test APK at $TEST_APK"
            echo "Available files under outputs/apk/androidTest/debug:"
            find android/app/build/outputs/apk/androidTest/debug -maxdepth 1 -type f -print || true
            exit 1
          fi
          echo "Found test APK: $TEST_APK"

      - name: Prepare artifact folders (android)
        working-directory: mobile
        run: mkdir -p artifacts e2e/screenshots

      - name: Start Metro (background)
        working-directory: mobile
        run: |
          nohup npx expo start --dev-client --port 8081 --non-interactive >/tmp/metro.log 2>&1 &
          echo $! > /tmp/metro.pid
          # make sure the emulator can reach Metro
          adb reverse tcp:8081 tcp:8081 || true
          sleep 12
 
      - name: Run Android smoke test
        working-directory: mobile
        run: |
          npx detox test \
            --configuration android.emu.debug \
            --artifacts-location artifacts \
            --record-logs none \
            --take-screenshots failing \
            --record-videos none \
            e2e/smoke.e2e.ts
        env:
          DETOX_LOGLEVEL: info

      - name: Run Android E2E tests
        working-directory: mobile
        run: |
          npx detox test \
            --configuration android.emu.debug \
            --artifacts-location artifacts \
            --record-logs none \
            --take-screenshots failing \
            --record-videos none
        env:
          DETOX_LOGLEVEL: info

      - name: Stop Metro
        if: always()
        run: |
          if [ -f /tmp/metro.pid ]; then kill -9 "$(cat /tmp/metro.pid)" || true; fi
          tail -n 200 /tmp/metro.log || true

  
      - name: Capture Android logcat
        if: failure()
        working-directory: mobile
        run: |
          adb devices -l | tee adb-devices.txt || true
          adb logcat -d -v time > emulator.log || true

      - name: Upload Android test artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: android-e2e-artifacts
          path: |
            emulator.log
            mobile/artifacts/**
            mobile/e2e/screenshots/**
            mobile/android/app/build/outputs/**/*.apk
          if-no-files-found: warn
          retention-days: 7


  # Lint workflow files
  lint-workflows:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-actionlint@v1
        with:
          reporter: github-pr-check
          actionlint_flags: "-color"

  # Test Results Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [e2e-ios, e2e-android]
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "## E2E Test Results 🧪" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.e2e-ios.result }}" == "success" ]; then
            echo "✅ **iOS Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **iOS Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.e2e-android.result }}" == "success" ]; then
            echo "✅ **Android Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Android Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed results in the job logs above." >> $GITHUB_STEP_SUMMARY
