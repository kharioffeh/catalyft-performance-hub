# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
# Reduced memory for CI/CD to prevent OOM
org.gradle.jvmargs=-Xmx2048m -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8

# When configured, Gradle will run in incubating parallel mode.
# Disabled for CI to prevent race conditions
org.gradle.parallel=false
org.gradle.workers.max=2

# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
android.enableJetifier=true

# Enable AAPT2 PNG crunching
android.enablePngCrunchInReleaseBuilds=true

# Use this property to specify which architecture you want to build.
# Only build for arm64-v8a in CI to speed up builds
reactNativeArchitectures=arm64-v8a

# Use this property to enable support to the new architecture.
# Disabled to improve compatibility and build speed
newArchEnabled=false

# Use this property to enable or disable the Hermes JS engine.
# If set to false, you will be using JSC instead.
hermesEnabled=true

# Enable GIF support in React Native images (~200 B increase)
expo.gif.enabled=true
# Enable webp support in React Native images (~85 KB increase)
expo.webp.enabled=true
# Enable animated webp support (~3.4 MB increase)
# Disabled by default because iOS doesn't support animated webp
expo.webp.animated=false

# Enable network inspector
EX_DEV_CLIENT_NETWORK_INSPECTOR=true

# Use legacy packaging to compress native libraries in the resulting APK.
expo.useLegacyPackaging=false

# Whether the app is configured to use edge-to-edge via the app config or `react-native-edge-to-edge` plugin
expo.edgeToEdgeEnabled=true

# Android SDK versions
android.compileSdkVersion=35
android.targetSdkVersion=35
android.buildToolsVersion=35.0.0

# Packaging options
android.packagingOptions.pickFirsts=**/libc++_shared.so,**/libjsc.so,**/libhermes.so,META-INF/LICENSE,META-INF/LICENSE.md,META-INF/NOTICE,META-INF/NOTICE.md,META-INF/AL2.0,META-INF/LGPL2.1
android.packagingOptions.excludes=META-INF/DEPENDENCIES
android.extraMavenRepos=[]

# Optimized Gradle settings for CI/CD
org.gradle.daemon=false
org.gradle.caching=false
org.gradle.configureondemand=false
android.enableBuildCache=false
android.enableProfileCsvWriter=false
kotlin.incremental=false

# Disable unused features to speed up build
android.enableR8.fullMode=false
android.enableD8.desugaring=true

# Network timeout for dependencies
systemProp.http.connectionTimeout=120000
systemProp.http.socketTimeout=120000
systemProp.https.connectionTimeout=120000
systemProp.https.socketTimeout=120000