import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import { z } from "https://deno.land/x/zod@v3.20.2/mod.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Define the expected JSON schema for the program
const exerciseSchema = z.object({
  name: z.string(),
  sets: z.number().min(1),
  reps: z.union([z.number().min(1), z.string()]), // Allow "8-12" format
  rpe: z.number().min(1).max(10).optional(),
});

const blockSchema = z.object({
  dayOffset: z.number().min(0),
  exercises: z.array(exerciseSchema),
});

const programSchema = z.object({
  programName: z.string(),
  blocks: z.array(blockSchema),
});

// Request body schema
const requestSchema = z.object({
  goal: z.string(),
  daysPerWeek: z.array(z.number().min(0).max(6)),
  equipment: z.array(z.string()),
  experience: z.string(),
});

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
    );

    const authHeader = req.headers.get('Authorization')!;
    const token = authHeader.replace('Bearer ', '');
    const { data } = await supabaseClient.auth.getUser(token);
    const user = data.user;

    if (!user?.email) {
      return new Response('Unauthorized', { status: 401 });
    }

    // Parse and validate request body
    const body = await req.json();
    const { goal, daysPerWeek, equipment, experience } = requestSchema.parse(body);

    // Get OpenAI API key
    const OPENAI_API_KEY = Deno.env.get('OPENAI_ARIA_KEY') || Deno.env.get('OPENAI_API_KEY');
    
    if (!OPENAI_API_KEY) {
      return new Response(
        JSON.stringify({ error: 'OpenAI API key not configured' }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    // Convert daysPerWeek array to day names
    const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    const availableDays = daysPerWeek.map(day => dayNames[day]).join(', ');

    // Construct the system prompt for structured output
    const systemPrompt = `You are a professional fitness coach creating workout programs. You MUST respond with ONLY valid JSON in the following exact format:

{
  "programName": "string",
  "blocks": [
    {
      "dayOffset": number,
      "exercises": [
        {
          "name": "string",
          "sets": number,
          "reps": number_or_string,
          "rpe": number_optional
        }
      ]
    }
  ]
}

Rules:
- dayOffset is the number of days from program start (0 = day 1, 1 = day 2, etc.)
- Create exactly ${daysPerWeek.length} blocks for a weekly schedule
- Use dayOffset values: ${daysPerWeek.map((_, i) => i).join(', ')}
- reps can be a number (e.g., 8) or string (e.g., "8-12", "10-15")
- rpe is optional (1-10 scale)
- Choose exercises appropriate for the available equipment
- Match the program to the user's experience level and goal
- Return ONLY the JSON, no other text or formatting`;

    const userPrompt = `Create a ${goal} training program for:
- Experience level: ${experience}
- Training days: ${availableDays}
- Available equipment: ${equipment.join(', ')}
- Goal: ${goal}

Generate a comprehensive program with appropriate progression.`;

    // Call OpenAI GPT-4o
    const openAIResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user',
            content: userPrompt
          }
        ],
        max_tokens: 2000,
        temperature: 0.7,
      }),
    });

    if (!openAIResponse.ok) {
      const errorText = await openAIResponse.text();
      console.error('OpenAI API error:', errorText);
      return new Response(
        JSON.stringify({ error: 'Failed to generate program with AI' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const aiResult = await openAIResponse.json();
    const generatedContent = aiResult.choices[0]?.message?.content;

    if (!generatedContent) {
      return new Response(
        JSON.stringify({ error: 'No content generated by AI' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Parse and validate the AI response
    let programData;
    try {
      programData = JSON.parse(generatedContent);
      programData = programSchema.parse(programData);
    } catch (parseError) {
      console.error('Failed to parse AI response:', parseError);
      console.error('AI response was:', generatedContent);
      return new Response(
        JSON.stringify({ error: 'Invalid program format generated by AI' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Ensure programs table exists
    await supabaseClient.rpc('create_programs_table_if_not_exists');

    // Ensure program_blocks table exists  
    await supabaseClient.rpc('create_program_blocks_table_if_not_exists');

    // Insert into programs table
    const { data: program, error: programError } = await supabaseClient
      .from('programs')
      .insert({
        name: programData.programName,
        description: `${goal} program for ${experience} level athlete`,
        goal: goal,
        duration_weeks: Math.ceil(Math.max(...programData.blocks.map(b => b.dayOffset)) / 7) || 1,
        created_by: user.id,
        ai_generated: true,
        ai_prompt: userPrompt,
        ai_response: generatedContent,
        metadata: {
          daysPerWeek,
          equipment,
          experience
        }
      })
      .select()
      .single();

    if (programError) {
      console.error('Program creation error:', programError);
      return new Response(
        JSON.stringify({ error: `Failed to create program: ${programError.message}` }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Insert program blocks
    const blockInserts = programData.blocks.map(block => ({
      program_id: program.id,
      day_offset: block.dayOffset,
      exercises: block.exercises,
      created_at: new Date().toISOString()
    }));

    const { error: blocksError } = await supabaseClient
      .from('program_blocks')
      .insert(blockInserts);

    if (blocksError) {
      console.error('Program blocks creation error:', blocksError);
      // Try to clean up the program if block creation fails
      await supabaseClient.from('programs').delete().eq('id', program.id);
      return new Response(
        JSON.stringify({ error: `Failed to create program blocks: ${blocksError.message}` }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Trigger generateSessions function
    try {
      const generateSessionsResponse = await fetch(`${Deno.env.get('SUPABASE_URL')}/functions/v1/generateSessions`, {
        method: 'POST',
        headers: {
          'Authorization': authHeader,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ programId: program.id }),
      });

      if (!generateSessionsResponse.ok) {
        console.warn('Failed to generate sessions:', await generateSessionsResponse.text());
        // Don't fail the entire request, just log the warning
      }
    } catch (sessionError) {
      console.warn('Error calling generateSessions:', sessionError);
      // Don't fail the entire request
    }

    return new Response(
      JSON.stringify({
        programId: program.id,
        blockCount: programData.blocks.length,
        message: 'Program generated successfully'
      }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('Error in aria-generate-program:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'Internal server error' }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});