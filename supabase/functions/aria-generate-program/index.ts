
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
    );

    const authHeader = req.headers.get('Authorization')!;
    const token = authHeader.replace('Bearer ', '');
    const { data } = await supabaseClient.auth.getUser(token);
    const user = data.user;

    if (!user?.email) {
      return new Response('Unauthorized', { status: 401 });
    }

    const { goal, weeks, available_days, equipment, prompt } = await req.json();

    // Try both possible OpenAI API key names
    const OPENAI_ARIA_KEY = Deno.env.get('OPENAI_ARIA_KEY') || Deno.env.get('OPENAI_API_KEY');
    
    // Debug logging to check environment variables
    console.log('Environment check:', {
      OPENAI_ARIA_KEY_exists: !!Deno.env.get('OPENAI_ARIA_KEY'),
      OPENAI_API_KEY_exists: !!Deno.env.get('OPENAI_API_KEY'),
      using_key: OPENAI_ARIA_KEY ? 'FOUND' : 'NOT_FOUND',
      timestamp: new Date().toISOString()
    });
    
    if (!OPENAI_ARIA_KEY) {
      return new Response(
        JSON.stringify({ error: 'OpenAI API key not configured' }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    // Get user profile
    const { data: profile } = await supabaseClient
      .from('profiles')
      .select('*')
      .eq('id', user.id)
      .single();

    if (!profile) {
      return new Response('Profile not found', { status: 404 });
    }

    // Solo-only: user is both athlete and coach
    const targetUserId = user.id;

    // Function to extract goal from descriptive text
    const extractGoalFromText = (text: string): string => {
      const goalMap: { [key: string]: string } = {
        'strength': 'strength',
        'muscle': 'hypertrophy',
        'hypertrophy': 'hypertrophy',
        'endurance': 'endurance',
        'cardio': 'endurance',
        'power': 'power',
        'explosive': 'power',
        'fat loss': 'strength', // Map to valid goal
        'weight loss': 'strength',
        'fitness': 'endurance',
        'general': 'endurance',
        'rehab': 'rehab',
        'rehabilitation': 'rehab',
        'sport': 'power'
      };
      
      const lowerText = text.toLowerCase();
      for (const [keyword, goalValue] of Object.entries(goalMap)) {
        if (lowerText.includes(keyword)) {
          return goalValue;
        }
      }
      
      // Default to strength if no match found
      return 'strength';
    };

    // Extract goal from either goal field or prompt
    const extractedGoal = extractGoalFromText(goal || prompt || '');
    
    console.log('Goal processing:', {
      originalGoal: goal,
      prompt: prompt,
      extractedGoal: extractedGoal,
      timestamp: new Date().toISOString()
    });

    // Generate program using OpenAI
    const promptText = prompt || `Generate a ${weeks}-week ${goal} training program for someone who can train on ${available_days?.join(', ')} with access to ${equipment?.join(', ')}.`;

    const openAIResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_ARIA_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: 'You are a professional fitness coach. Generate detailed workout programs in JSON format with exercises, sets, reps, and progression guidelines.'
          },
          {
            role: 'user',
            content: promptText
          }
        ],
        max_tokens: 2000,
        temperature: 0.7,
      }),
    });

    if (!openAIResponse.ok) {
      const errorText = await openAIResponse.text();
      console.error('OpenAI API error:', errorText);
      return new Response(
        JSON.stringify({ error: 'Failed to generate program with AI' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const aiResult = await openAIResponse.json();
    const generatedContent = aiResult.choices[0]?.message?.content;

    if (!generatedContent) {
      return new Response(
        JSON.stringify({ error: 'No content generated by AI' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Create template with extracted goal
    const { data: template, error: templateError } = await supabaseClient
      .from('template')
      .insert({
        title: `AI Generated ${extractedGoal.charAt(0).toUpperCase() + extractedGoal.slice(1)} Program`,
        description: `${weeks}-week program generated by ARIA`,
        duration_weeks: weeks,
        goal: extractedGoal, // Use extracted goal
        difficulty: 'intermediate',
        created_by: targetUserId,
        ai_generated: true,
        ai_prompt: promptText,
        ai_response: generatedContent
      })
      .select()
      .single();

    if (templateError) {
      console.error('Template creation error:', templateError);
      return new Response(
        JSON.stringify({ error: `Failed to create template: ${templateError.message}` }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Create program instance
    const { data: programInstance, error: instanceError } = await supabaseClient
      .from('program_instances')
      .insert({
        template_id: template.id,
        athlete_id: targetUserId,
        coach_id: targetUserId,
        start_date: new Date().toISOString().split('T')[0],
        status: 'active'
      })
      .select()
      .single();

    if (instanceError) {
      console.error('Program instance creation error:', instanceError);
      return new Response(
        JSON.stringify({ error: `Failed to create program instance: ${instanceError.message}` }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Try to create program_templates entry (ignore if constraint fails)
    try {
      await supabaseClient
        .from('program_templates')
        .insert({
          template_id: template.id,
          origin: 'aria'
        });
    } catch (error) {
      console.log('program_templates insert failed (likely constraint issue):', error);
      // Continue without failing the whole operation
    }

    return new Response(
      JSON.stringify({
        template_id: template.id,
        program_instance_id: programInstance.id,
        message: 'Program generated successfully'
      }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('Error in aria-generate-program:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'Internal server error' }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
